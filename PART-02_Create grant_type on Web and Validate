

03. How to create grant_type:client_credentials(Client ID) and Generate access token with it from webpage? (V_37)
04. How to CHECK/validate generated access_token, INSERT into ARRAY and PUT it into SESSION (V_37)
            a) will expires in 5Min
            b) decorate token like Bearer TOKEN
            c) Include grand_type
05. How to check wheather Access_token exists in Session and Not Expired? (V_37)


06. How to create grant_type:authorization_code (Authorization System) in WEB? (V_41,42,43)
07. How to create grant_type: password  in WEB? ()


09. How to get worked Refresh Token? 
08. How to get access_token of a Logged in User?

---------------------

<?php
namespace App\Services;
use App\Traits\ConsumesExternalServices;
use App\Traits\InteractsWithMarketResponses;

class MarketAuthenticationService{
    use ConsumesExternalServices, InteractsWithMarketResponses;

    protected $baseUri;
    protected $clientId;
    protected $clientSecret;
    protected $passwordClientId;
    protected $passwordClientSecret;

    public function __construct(){
        $this->baseUri = config('services.market.base_uri');
        $this->clientId = config('services.market.client_id');
        $this->clientSecret = config('services.market.client_secret');
        $this->passwordClientId = config('services.market.password_client_id');
        $this->passwordClientSecret = config('services.market.password_client_secret');
    }


============= 03. How to create grant_type:client_credentials(Client ID) and Generate access token with it from webpage? (V_37) ===============

  public function getClientCredentialsToken(){
        if ($token = $this->existingValidToken())  {
            return $token;
        }

        $formParams = [
            'grant_type' => 'client_credentials',
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,
        ];

        $tokenData = $this->makeRequest('POST', 'oauth/token', [], $formParams);
        $this->storeValidToken($tokenData, 'client_credentials');
        return $tokenData->access_token;
    }

----Route(WEB), Controller and Blade-----


>>>>> Create FORM (After Log into Breez) <<<<<<<<<<<<<<<<<<<
            <form action="/oauth/clients" method="POST">
            @csrf
            <input name="name" type="name">
            <input name="redirect" type="text"> //redirect URI - none for client credentials
            </form>

>>>>> SHOW CLIENTs(ROUTE) **CREATED BY LOGGED IN USER  <<<<<<<<<<<<
            Route::get('dashboard/clients', function(Request $request){
                return view('clients', ['clients'=> $request->user()->clients]);
            })->name('dashboard.clients');


>>>>> SHOW CLIENTS<<<<<<<<<<<<<<<<<<
            @forelse ($clients as $client)
            {{$client->id}}{{$client->name}}
            {{$client->redirect}}{{$client->secret}}
            @empty                       
            @endforelse


>>>> DELETE/REVOCK CLIENT ID  <<<<<<<<<<<<<<
use Laravel\Passport\Token;
public function revokeToken(Request $request){
    $request->user()->tokens()->where('id', $tokenId)->delete();
    return response(['message' => 'Token revoked']);
}


>>>>> Create CLIENT  <<<<<<<<<<<
            Route::get('client', function (\Laravel\Passport\ClientRepository $clientRepository, Request $request) {
               return view('client-token', ['client_token' => $clientRepository->create(null, $request->name, $request->redirect)]); 
            })->name('dashboard.clients');

>>> Controller <<<<<<<<<<<<<<<<<<<

            public function CreateClient(\Laravel\Passport\ClientRepository $clientRepository, Request $request) {                                                                        
               return view('client-token', ['client_token' => $clientRepository->create(null, $request->name, $request->redirect)]); 
            }

*** $clientRepository->create(user_id, 'name', 'redirect')])
                        // 1st param is the user_id - none for client credentials
                        // 2nd param is the client name
                        // 3rd param is the redirect URI - none for client credentials


============== 04. How to CHECK/validate generated access_token, INSERT into ARRAY and PUT it into SESSION (V_37) ============

public function storeValidToken($tokenData, $grantType){
        $tokenData->token_expires_at = now()->addSeconds($tokenData->expires_in - 5);
        $tokenData->access_token = "{$tokenData->token_type} {$tokenData->access_token}";
        $tokenData->grant_type = $grantType;

        session()->put(['current_token' => $tokenData]);
    }


============== 05. How to check wheather Access_token is exists in Session and Not Expired? (V_37) ============================ 
public function existingValidToken() {
        if (session()->has('current_token')) {
            $tokenData = session()->get('current_token');

            if (now()->lt($tokenData->token_expires_at)) {
                return $tokenData->access_token;
            }
        }
        return false;
    }
============= 06. How to create grant_type:authorization_code (Authorization System) in WEB? (V_41,42,43) ==========================

public function resolveAuthorizationUrl(){
        $query = http_build_query([
            'client_id' => $this->clientId,
            'redirect_uri' => route('authorization'),
            'response_type' => 'code',
            'scope' => 'purchase-product manage-products manage-account read-general',
        ]);

        return "{$this->baseUri}/oauth/authorize?{$query}";
    }
    public function getCodeToken($code) {
        $formParams = [
            'grant_type' => 'authorization_code',
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,
            'redirect_uri' => route('authorization'),
            'code' => $code,
        ];

        $tokenData = $this->makeRequest('POST', 'oauth/token', [], $formParams);
        $this->storeValidToken($tokenData, 'authorization_code');
        return $tokenData;
    }

======================== 07. How to create grant_type: password  in WEB?======================================

 public function getPasswordToken($username, $password) {
        $formParams = [
            'grant_type' => 'password',
            'client_id' => $this->passwordClientId,
            'client_secret' => $this->passwordClientSecret,
            'username' => $username,
            'password' => $password,
            'scope' => 'purchase-product manage-products manage-account read-general',
        ];

        $tokenData = $this->makeRequest('POST', 'oauth/token', [], $formParams);
        $this->storeValidToken($tokenData, 'password');

        return $tokenData;
    }


======================== 08. How get work Refresh Token ==================================

public function refreshAuthenticatedUserToken($user){
        $clientId = $this->clientId;
        $clientSecret = $this->clientSecret;

        if ($user->grant_type === 'password') {
            $clientId = $this->passwordClientId;
            $clientSecret = $this->passwordClientSecret;
        }

        $formParams = [
            'grant_type' => 'refresh_token',
            'client_id' => $clientId,
            'client_secret' => $clientSecret,
            'refresh_token' => $user->refresh_token,
        ];

        $tokenData = $this->makeRequest('POST', 'oauth/token', [], $formParams);
        $this->storeValidToken($tokenData, $user->grant_type);
        $user->fill([
            'access_token' => $tokenData->access_token,
            'refresh_token' => $tokenData->refresh_token,
            'token_expires_at' => $tokenData->token_expires_at,
        ]);

        $user->save();
        return $tokenData->access_token;
    }



======================== 09. How to get access_token of a Logged in User?  =================================

public function getAuthenticatedUserToken(){
        $user = auth()->user();
        if (now()->lt($user->token_expires_at)) {
            return $user->access_token;
        }
        return $this->refreshAuthenticatedUserToken($user);

    }


-
