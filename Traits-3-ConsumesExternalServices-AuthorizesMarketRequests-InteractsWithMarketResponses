

<?php 

namespace App\Traits;

use GuzzleHttp\Client;

trait ConsumesExternalServices{
    public function makeRequest($method, $requestUrl, $queryParams=[], $formParams=[], $headers=[], $hasFile=false){
        
        // GuzzleHttp function
        $client= new Client([
                 'base_uri' => $this->baseUri,
                 ]);
        // Check Access Permission type
        if (method_exists($this, 'resolveAuthorization')) {
           $this->resolveAuthorization($queryParams, $formParams, $headers);
        }
        
        $bodyType = 'form_params';

        // handle file upload/download ex: image
        if ($hasFile) {
            $bodyType= 'multipart';
            $multipart= [];
            foreach($formParams as $name => $contents){
                $multipart[]=['name'=>$name, 'contents'=>$contents];
            }
        }

        // GuzzleHttp function
        $response= $client->request($method, $requestUrl,[
            'query'=>$queryParams,
            $bodyType => $hasFile ? $multipart:$formParams,
            'headers'=>$headers,
        ]);

        $response = $response->getBody()->getContents();

        // convert api's json data to php
        if(method_exists($this, 'decodeResponse')){
            $response= $this->decodeResponse($response);
        }
        // show error if request return any error
        if (method_exists($this, 'checkIfErrorResponse')) {
            $this->checkIfErrorResponse($response);
        }

        return $response;
    }

}

=============================================  trait AuthorizesMarketRequests ===============================
<?php

namespace App\Traits;
use App\Services\MarketAuthenticationService;

trait AuthorizesMarketRequests{
       public function resolveAuthorization(&$queryParams, &$formParams, &$headers){
        $accessToken = $this->resolveAccessToken();
        $headers['Authorization'] = $accessToken;
    }

    public function resolveAccessToken(){
        $authenticationService = resolve(MarketAuthenticationService::class);
        if (auth()->user()) {
            return $authenticationService->getAuthenticatedUserToken();
        }
        return $authenticationService->getClientCredentialsToken();
    }
}

===================================== trait InteractsWithMarketResponses =============================
<?php
namespace App\Traits;
trait InteractsWithMarketResponses{
       public function decodeResponse($response){
        $decodedResponse = json_decode($response);
        return $decodedResponse->data ?? $decodedResponse;
    }

    public function checkIfErrorResponse($response){
        if (isset($response->error)) {
            throw new \Exception("Something failed: {$response->error}");
        }
    }
}


-
